[[release-highlights]]
== What's new in {minor-version}

Here are the highlights of what's new and improved in {es} {minor-version}!
ifeval::[\{release-state}\"!=\"unreleased\"]
For detailed information about this release, see the <<es-release-notes>> and
<<breaking-changes>>.
endif::[]

// Add previous release to the list
Other versions:

<<<<<<< HEAD
{ref-bare}/8.5/release-highlights.html[8.5]
=======
{ref-bare}/8.7/release-highlights.html[8.7]
| {ref-bare}/8.6/release-highlights.html[8.6]
| {ref-bare}/8.5/release-highlights.html[8.5]
>>>>>>> upstream/main
| {ref-bare}/8.4/release-highlights.html[8.4]
| {ref-bare}/8.3/release-highlights.html[8.3]
| {ref-bare}/8.2/release-highlights.html[8.2]
| {ref-bare}/8.1/release-highlights.html[8.1]
| {ref-bare}/8.0/release-highlights.html[8.0]

// tag::notable-highlights[]

[discrete]
<<<<<<< HEAD
[[make_categorize_text_aggregation_ga]]
=== Make `categorize_text` aggregation GA
The `categorize_text` aggregation has been moved from technical preview to general availability.

{es-pull}88600[#88600]
=======
[[add_new_similarity_field_to_knn_clause_in_search]]
=== Add new `similarity` field to `knn` clause in `_search`
This adds a new parameter to `knn` that allows filtering nearest
neighbor results that are outside a given similarity.

`num_candidates` and `k` are still required as this controls the
nearest-neighbor vector search accuracy and exploration. For each shard
the query will search `num_candidates` and only keep those that are
within the provided `similarity` boundary, and then finally reduce to
only the global top `k` as normal.

For example, when using the `l2_norm` indexed similarity value, this
could be considered a `radius` post-filter on `knn`.

relates to: https://github.com/elastic/elasticsearch/issues/84929 &&
https://github.com/elastic/elasticsearch/pull/93574

{es-pull}94828[#94828]
>>>>>>> upstream/main

// end::notable-highlights[]


[discrete]
[[support_cartesian_centroid_aggregation_over_points_shapes]]
=== Support cartesian_centroid aggregation over points and shapes
Similar to the existing `geo_centroid` aggregation, this new metric aggregation, `cartesian_centroid`,
calculates the centroid over cartesian point and shape fields.

{es-pull}89216[#89216]

[discrete]
[[stack_monitoring_logstash_load_average_type_fixed_for_metricbeat_collection]]
=== Stack Monitoring: Logstash load average type fixed for metricbeat collection
Previously, the templates for ingesting logstash load average using metricbeat were set to `long`. This provides only an integer graph.

The type has been corrected to `half_float`. You can force a rollover to see the change immediately or wait for the next ILM rollover.

[source,console]
----
POST .monitoring-logstash-8-mb/_rollover
----
// TEST[skip:"quick changelog code snippet"]

{es-pull}90494[#90494]

[discrete]
[[support_cartesian_bounds_aggregation_over_points_shapes]]
=== Support cartesian_bounds aggregation over points and shapes
Similar to the existing `geo_bounds` aggregation, this new metric aggregation, `cartesian_bounds`,
calculates the bounds of cartesian point and shape fields.

{es-pull}91298[#91298]

